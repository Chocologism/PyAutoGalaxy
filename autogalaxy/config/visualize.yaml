general:
  general:
    backend: default                  # The matploblib backend used for visualization. `default` uses the system default, can specifiy specific backend (e.g. TKAgg, Qt5Agg, WXAgg).
    imshow_origin: upper              # The `origin` input of `imshow`, determining if pixel values are ascending or descending on the y-axis.
    zoom_around_mask: true            # If True, plots of data structures with a mask automatically zoom in the masked region.
  inversion:
    reconstruction_vmax_factor: 0.5   # Plots of an Inversion's reconstruction use the reconstructed data's bright value multiplied by this factor.
  units:
    in_kpc: false                     # If True, plots that are normally in arc-seconds are instead plotted using kiloparsecs.

include:
  include_1d:
    einstein_radius: true             # Include a vertical line at the lens mass model's Einstein radius?
    half_light_radius: true           # Include a vertical line at the lens light model's half-light radius (same as effective radius)?
  include_2d:
    caustics: true                    # Include the lens mass model's caustics on source-plane figures?
    critical_curves: true             # Include the lens mass model's critical curves on image-plane figures?
    light_profile_centres: true       # Include the centres of the lens light models on image-plane and source-plane figures?
    mass_profile_centres: true        # Include the centres of the lens mass models on image-plane and source-plane figures?
    multiple_images: true             # Include the multiple images of the lensed source for point-source based models (e.g. using a PositionsSolver)?

# The `plots` section customizes every image that is output to hard-disk during a model-fit.

# For example, if `plots: fit: subplot_fit=True``, the ``fit_imaging.png`` subplot file will be plotted every time visualization is performed.

plots:
  dataset:
    subplot_dataset: true
    absolute_signal_to_noise_map: false
    data: false
    inverse_noise_map: false
    noise_map: false
    potential_chi_squared_map: false
    signal_to_noise_map: false
  fit:
    subplot_fit: true
    subplot_of_galaxies: true
    subtracted_images_of_galaxies: true
    chi_squared_map: false
    data: false
    model_data: false
    model_images_of_galaxies: true
    noise_map: false
    normalized_residual_map: false
    residual_map: false
    signal_to_noise_map: false
    all_at_end_fits: false
    all_at_end_png: false
  fit_imaging: {}
  fit_interferometer:
    amplitudes_vs_uv_distances: false
    dirty_chi_squared_map: false
    dirty_image: false
    dirty_inverse_noise_map: false
    dirty_noise_map: false
    dirty_normalized_residual_map: false
    dirty_residual_map: false
    dirty_signal_to_noise_map: false
    phases_vs_uv_distances: false
    uv_wavelengths: false
  fit_quantity:
    subplot_fit: true
    chi_squared_map: false
    image: true
    model_image: false
    noise_map: false
    residual_map: false
    all_at_end_fits: true
    all_at_end_png: true
  galaxies:
    convergence: false
    image: false
    potential: false
  hyper:
      fit_no_hyper: true
    images_of_galaxies: true
    contribution_map_list: true
    model_image: true
  imaging:
    psf: false
  interferometer:
    amplitudes_vs_uv_distances: false
    dirty_image: false
    dirty_inverse_noise_map: false
    dirty_noise_map: false
    dirty_signal_to_noise_map: false
    phases_vs_uv_distances: false
    uv_wavelengths: false
  inversion:
    subplot_inversion: true
    chi_squared_map: false
    errors: false
    normalized_residual_map: false
    reconstructed_image: false
    reconstruction: false
    regularization_weights: false
    residual_map: false
    all_at_end_png: false
  other:
    stochastic_histogram: false
  plane:
    subplot_plane: true
    subplot_galaxy_images: true
    convergence: false
    deflections: false
    image: false
    magnification: false
    potential: false
    source_plane_image: false
    all_at_end_fits: false
    all_at_end_png: false
  positions:
    image_with_positions: true

mat_wrap_1d:
  EinsteinRadiusAXVLine:              # wrapper for `plt.axvline()`: customize verticals lines plotted to represent the Einstein radius on 1D figures.
    figure:
      c: b
      linestyle: --
    subplot:
      c: b
      linestyle: --
  HalfLightRadiusAXVLine:             # wrapper for `plt.axvline()`: customize verticals lines plotted to represent the half-light radius on 1D figures.
    figure:
      c: g
      linestyle: -.
    subplot:
      c: kg
      linestyle: -.
  ModelFluxesYXScatter:               # wrapper for `plt.scatter()`: customize 1D plot of fluxes for point-source modeling.
    figure:
      c: c
    subplot:
      c: c
mat_wrap_2d:
  CausticsPlot:                       # wrapper for `plt.plot()`: customize plots caustics in the source-plane.
    figure:
      c: k,r,g,b,m,y
      linestyle: '-'
      linewidth: 2
    subplot:
      c: k,r,g,b,m,y
      linestyle: '-'
      linewidth: 2
  CriticalCurvesPlot:                 # wrapper for `plt.plot()`: customize plots critical curves in the image-plane.
    figure:
      c: k,r,g,b,m,y
      linestyle: '-'
      linewidth: 2
    subplot:
      c: k,r,g,b,m,y
      linestyle: '-'
      linewidth: 2
  LightProfileCentresScatter:        # wrapper for `plt.scatter()`: customize the appearance of points showing the light profile centres.
    figure:
      c: k,r,g,b,m,y
      marker: +
      s: 20
    subplot:
      c: r,g,b,m,y,k
      marker: +
      s: 26
  MassProfileCentresScatter:         # wrapper for `plt.scatter()`: customize the appearance of points showing the mass profile centres.
    figure:
      c: k,r,g,b,m,y
      marker: x
      s: 20
    subplot:
      c: r,g,b,m,y,k
      marker: x
      s: 26
  MultipleImagesScatter:            # wrapper for `plt.scatter()`: customize the appearance of points showing the multiple images of a point source model.
    figure:
      c: k,r,g,b,m,y
      marker: o
      s: 16
    subplot:
      c: r,g,b,m,y,k
      marker: o
      s: 16